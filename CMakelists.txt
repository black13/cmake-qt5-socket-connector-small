cmake_minimum_required(VERSION 3.16)
project(NodeGraph VERSION 1.0.0 LANGUAGES CXX)

# ─────────────────────────────────────
# 1. C++ standard and project settings
# ─────────────────────────────────────
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Enable position independent code for better optimization
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# ─────────────────────────────────────
# 2. Platform-specific settings - Enhanced Win32 Optimization
# ─────────────────────────────────────
if(WIN32)
    set(CMAKE_SYSTEM_VERSION 10.0)
    add_compile_definitions(WIN32_LEAN_AND_MEAN NOMINMAX)

    # Enable parallel compilation for MSVC
    add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)

    # Windows-specific optimizations
    add_compile_options(
        $<$<CONFIG:Release>:/O2>  # Optimize for speed
        $<$<CONFIG:Release>:/Ob2> # Inline function expansion
        $<$<CONFIG:Release>:/Oi>   # Enable intrinsic functions
        $<$<CONFIG:Release>:/Ot>   # Favor speed over size
        $<$<CONFIG:Release>:/Oy>   # Omit frame pointers
        $<$<CONFIG:Release>:/GL>   # Enable link-time code generation
        $<$<CONFIG:Release>:/Gy>   # Separate functions for linker
        $<$<CONFIG:Release>:/arch:AVX2> # Use AVX2 instructions
    )

    # Linker optimizations for Release builds
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG /INCREMENTAL:NO")
    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG /INCREMENTAL:NO")
    set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /LTCG /INCREMENTAL:NO")

    # Precompiled headers for MSVC
    set(CMAKE_PCH_INSTANTIATE_TEMPLATES ON)
    set(CMAKE_MSVC_PCH ON)

    # Windows SDK version targeting
    if(CMAKE_SYSTEM_VERSION)
        add_compile_options(/subsystem:windows,5.02)
    endif()
endif()

# ─────────────────────────────────────
# 3. Build type configuration
# ─────────────────────────────────────
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

# Optimization flags for Release builds
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_compile_options($<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-O3 -DNDEBUG>)
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

# ─────────────────────────────────────
# 4. Qt configuration with optimized search
# ─────────────────────────────────────
# Use Qt's built-in CMake configuration
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

# Preferred Qt installation paths (Windows)
if(WIN32)
    list(APPEND CMAKE_PREFIX_PATH
        "E:/Qt/5.15.16/Release_x64"
        "E:/Qt/5.15.16/Debug_x64"
    )
endif()

# Find Qt components with REQUIRED for early failure
find_package(Qt5 REQUIRED COMPONENTS Core Widgets Gui)
find_package(Qt5 COMPONENTS Test Qml)  # Optional components

# ─────────────────────────────────────
# 5. libxml2 configuration with caching optimization
# ─────────────────────────────────────
option(USE_SYSTEM_LIBXML2 "Use system libxml2 instead of building from source" OFF)

if(NOT WIN32 AND USE_SYSTEM_LIBXML2)
    find_package(PkgConfig QUIET)
    if(PkgConfig_FOUND)
        pkg_check_modules(LIBXML2 QUIET libxml-2.0>=2.9.0)
        if(LIBXML2_FOUND)
            add_library(LibXml2::LibXml2 INTERFACE IMPORTED)
            target_include_directories(LibXml2::LibXml2 INTERFACE ${LIBXML2_INCLUDE_DIRS})
            target_link_libraries(LibXml2::LibXml2 INTERFACE ${LIBXML2_LIBRARIES})
            target_compile_options(LibXml2::LibXml2 INTERFACE ${LIBXML2_CFLAGS_OTHER})
            message(STATUS "Using system libxml2: ${LIBXML2_VERSION}")
        else()
            message(WARNING "System libxml2 not found, falling back to FetchContent")
            set(USE_SYSTEM_LIBXML2 OFF)
        endif()
    endif()
endif()

if(NOT USE_SYSTEM_LIBXML2)
    include(FetchContent)

    # Use a persistent cache directory
    set(FETCHCONTENT_BASE_DIR "${CMAKE_BINARY_DIR}/_deps" CACHE PATH "FetchContent base directory")

    FetchContent_Declare(
        libxml2
        GIT_REPOSITORY https://github.com/GNOME/libxml2.git
        GIT_TAG        v2.12.5
        GIT_SHALLOW    TRUE
    )

    # Only populate if not already available
    FetchContent_GetProperties(libxml2)
    if(NOT libxml2_POPULATED)
        # Optimized build configuration for libxml2
        set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build static libraries")
        set(LIBXML2_WITH_ICONV OFF CACHE BOOL "Disable iconv support")
        set(LIBXML2_WITH_LZMA OFF CACHE BOOL "Disable LZMA support")
        set(LIBXML2_WITH_ZLIB OFF CACHE BOOL "Disable zlib support")
        set(LIBXML2_WITH_PYTHON OFF CACHE BOOL "Disable Python bindings")
        set(LIBXML2_WITH_TESTS OFF CACHE BOOL "Disable tests")
        set(LIBXML2_WITH_PROGRAMS OFF CACHE BOOL "Disable programs")
        set(LIBXML2_WITH_HTTP OFF CACHE BOOL "Disable HTTP support")
        set(LIBXML2_WITH_FTP OFF CACHE BOOL "Disable FTP support")

        # Windows-specific optimizations for libxml2
        if(WIN32)
            set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /O2 /Ob2 /Oi /Ot /Oy")
            set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /Zi /Od")
        endif()

        FetchContent_MakeAvailable(libxml2)

        # Create alias target for consistency
        add_library(LibXml2::LibXml2 ALIAS libxml2)
    endif()
endif()

add_definitions(-DUSE_LIBXML2)

# ─────────────────────────────────────
# 6. Source file organization
# ─────────────────────────────────────
# Core library sources
set(CORE_SOURCES
    # Node/Edge/Socket architecture
    node.h node.cpp
    socket.h socket.cpp
    edge.h edge.cpp
    ghost_edge.h ghost_edge.cpp

    # Graph architecture
    graph.h graph.cpp
    graph_controller.h graph_controller.cpp

    # Factory and registry
    node_registry.h node_registry.cpp
    graph_factory.h graph_factory.cpp

    # UI components
    window.h window.cpp
    view.h view.cpp
    scene.h scene.cpp
    node_palette_widget.h node_palette_widget.cpp

    # JavaScript integration
    javascript_engine.h javascript_engine.cpp

    # Observer pattern
    graph_observer.h graph_observer.cpp
    xml_autosave_observer.h xml_autosave_observer.cpp
)

# Main application sources
set(MAIN_SOURCES
    main.cpp
    icons.qrc
)

# Test sources
set(TEST_SOURCES
    tst_main.h
    tst_main.cpp
)

# ─────────────────────────────────────
# 7. Core library target with modern CMake
# ─────────────────────────────────────
add_library(NodeGraphCore STATIC ${CORE_SOURCES})

# Include directories
target_include_directories(NodeGraphCore
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        $<INSTALL_INTERFACE:include>
)

# Compile definitions
target_compile_definitions(NodeGraphCore
    PRIVATE
        QT_NO_KEYWORDS
)

# Link libraries
target_link_libraries(NodeGraphCore
    PRIVATE
        Qt5::Core
        Qt5::Widgets
        Qt5::Gui
        LibXml2::LibXml2
)

# Compiler-specific optimizations
if(MSVC)
    target_compile_options(NodeGraphCore
        PRIVATE
            /W4
            /wd4100  # Disable "unreferenced parameter" warnings
            /wd4127  # Disable "conditional expression is constant"
            /wd4251  # Disable "needs DLL interface" warnings
            $<$<CONFIG:Release>:/GL>  # Enable link-time code generation
    )
else()
    target_compile_options(NodeGraphCore
        PRIVATE
            -Wall
            -Wextra
            -Wpedantic
            -Wno-unused-parameter
    )
endif()

# ─────────────────────────────────────
# 8. Main application target
# ─────────────────────────────────────
add_executable(NodeGraph WIN32 ${MAIN_SOURCES})

# Link to core library and Qt
target_link_libraries(NodeGraph
    PRIVATE
        NodeGraphCore
        Qt5::Core
        Qt5::Widgets
        Qt5::Gui
)

# Windows-specific settings
if(WIN32)
    set_target_properties(NodeGraph PROPERTIES
        WIN32_EXECUTABLE TRUE
        VS_DPI_AWARE "PerMonitor"
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
    )

    # Debug/Release environment setup
    set_target_properties(NodeGraph PROPERTIES
        VS_DEBUGGER_ENVIRONMENT_DEBUG
            "PATH=E:/Qt/5.15.16/Debug_x64/bin;%PATH%"
        VS_DEBUGGER_ENVIRONMENT_RELEASE
            "PATH=E:/Qt/5.15.16/Release_x64/bin;%PATH%"
        VS_DEBUGGER_WORKING_DIRECTORY
            "${CMAKE_CURRENT_SOURCE_DIR}"
    )

    # Windows-specific linker optimizations
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        set_target_properties(NodeGraph PROPERTIES
            LINK_FLAGS "/LTCG /INCREMENTAL:NO /OPT:REF /OPT:ICF"
        )
    endif()
endif()

# ─────────────────────────────────────
# 9. Test application target
# ─────────────────────────────────────
add_executable(NodeGraphTests ${TEST_SOURCES})

target_link_libraries(NodeGraphTests
    PRIVATE
        NodeGraphCore
        Qt5::Core
        Qt5::Widgets
        Qt5::Gui
        Qt5::Test
)

# ─────────────────────────────────────
# 10. Install rules
# ─────────────────────────────────────
if(WIN32)
    install(TARGETS NodeGraph NodeGraphTests
        RUNTIME DESTINATION bin
    )

    # Install Qt DLLs (simplified approach)
    install(CODE "
        file(INSTALL
            \"\${QT5_PATH}/bin/Qt5Core.dll\"
            \"\${QT5_PATH}/bin/Qt5Widgets.dll\"
            \"\${QT5_PATH}/bin/Qt5Gui.dll\"
            DESTINATION \"\${CMAKE_INSTALL_PREFIX}/bin\"
        )
    ")
endif()

# ─────────────────────────────────────
# 11. Build information
# ─────────────────────────────────────
message(STATUS "")
message(STATUS "─────────────────────────────────────")
message(STATUS "Build Configuration:")
message(STATUS "  Project:          ${PROJECT_NAME} ${PROJECT_VERSION}")
message(STATUS "  Build Type:       ${CMAKE_BUILD_TYPE}")
message(STATUS "  C++ Standard:     C++${CMAKE_CXX_STANDARD}")
message(STATUS "  Qt Version:       ${Qt5_VERSION}")
message(STATUS "  libxml2 Source:   ${USE_SYSTEM_LIBXML2 ? "System" : "FetchContent"}")
message(STATUS "  Generator:        ${CMAKE_GENERATOR}")
message(STATUS "  Install Prefix:   ${CMAKE_INSTALL_PREFIX}")
message(STATUS "─────────────────────────────────────")
message(STATUS "")

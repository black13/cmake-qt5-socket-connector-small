cmake_minimum_required(VERSION 3.16)
project(NodeGraph VERSION 1.0.0 LANGUAGES CXX)

# ─────────────────────────────────────
# NOTE: Code Review Compendium Script
# ─────────────────────────────────────
# generate_code_compendium.sh - Creates complete code review package
# This script is NOT part of the build - it's for reviewer delivery only
# Run: ./generate_code_compendium.sh to create reviewer package

# ─────────────────────────────────────
# 1.  C++ standard
# ─────────────────────────────────────
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# ─────────────────────────────────────
# 2.  Windows-specific defines
# ─────────────────────────────────────
if(WIN32)
    set(CMAKE_SYSTEM_VERSION 10.0)
    add_definitions(-DWIN32_LEAN_AND_MEAN -DNOMINMAX)
endif()

# ─────────────────────────────────────
# 3.  Default build-type
# ─────────────────────────────────────
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

# ─────────────────────────────────────
# 4.  Qt search paths (adapt to your install)
# ─────────────────────────────────────
if(WIN32)
    list(APPEND CMAKE_PREFIX_PATH
        "E:/Qt/5.15.16/Release_x64"
        "E:/Qt/5.15.16/Debug_x64"
        "C:/Qt/5.15.2/msvc2019_64"
        "C:/Qt/5.15.2/msvc2019"
        "C:/Qt/5.12.12/msvc2017_64"
    )
endif()

# ─────────────────────────────────────
# 5.  Find Qt5 modules
# ─────────────────────────────────────
find_package(Qt5 REQUIRED COMPONENTS Core Widgets Gui Test Qml)

# ─────────────────────────────────────
# Find or build libxml2 for cross-platform XML handling
# ─────────────────────────────────────

# Try to use system libxml2 first (Linux/Unix only), fallback to FetchContent
set(USE_SYSTEM_LIBXML2 FALSE)

if(NOT WIN32)
    find_package(PkgConfig QUIET)
    if(PkgConfig_FOUND)
        pkg_check_modules(LIBXML2 QUIET libxml-2.0>=2.9.0)
        if(LIBXML2_FOUND AND LIBXML2_INCLUDE_DIRS)
            # Verify that we can actually find the headers
            find_path(LIBXML2_HEADER_TEST libxml/tree.h PATHS ${LIBXML2_INCLUDE_DIRS} NO_DEFAULT_PATH)
            if(LIBXML2_HEADER_TEST)
                set(USE_SYSTEM_LIBXML2 TRUE)
            endif()
        endif()
    endif()
endif()

if(USE_SYSTEM_LIBXML2)
    message(STATUS "Using system libxml2: ${LIBXML2_VERSION}")
    # Create an imported target for consistency
    add_library(LibXml2::LibXml2 INTERFACE IMPORTED)
    target_link_libraries(LibXml2::LibXml2 INTERFACE ${LIBXML2_LIBRARIES})
    target_include_directories(LibXml2::LibXml2 INTERFACE ${LIBXML2_INCLUDE_DIRS})
    target_compile_options(LibXml2::LibXml2 INTERFACE ${LIBXML2_CFLAGS_OTHER})
else()
    # Use FetchContent with persistent global cache
    include(FetchContent)
    
    # Set a global cache directory that persists across builds (separate for Debug/Release)
    set(FETCHCONTENT_BASE_DIR "${CMAKE_SOURCE_DIR}/.cmake-cache/${CMAKE_BUILD_TYPE}" CACHE PATH "FetchContent cache directory")
    
    # Check if libxml2 is already populated to avoid rebuilding
    FetchContent_GetProperties(libxml2)
    if(NOT libxml2_POPULATED)
        if(WIN32)
            message(STATUS "Windows: Building libxml2 from source (cached) - downloading and building...")
        else()
            message(STATUS "libxml2 not found in persistent cache - downloading and building...")
        endif()
        
        FetchContent_Declare(
            libxml2
            GIT_REPOSITORY https://github.com/GNOME/libxml2.git
            GIT_TAG        v2.12.5  # Stable version
            GIT_SHALLOW    TRUE
            SOURCE_DIR     "${FETCHCONTENT_BASE_DIR}/libxml2-src"
            BINARY_DIR     "${FETCHCONTENT_BASE_DIR}/libxml2-build"
        )
        
        # Configure libxml2 build options - minimal features for performance
        set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libraries" FORCE)
        set(LIBXML2_WITH_ICONV OFF CACHE BOOL "Build with iconv support" FORCE)
        set(LIBXML2_WITH_LZMA OFF CACHE BOOL "Build with lzma support" FORCE) 
        set(LIBXML2_WITH_ZLIB OFF CACHE BOOL "Build with zlib support" FORCE)
        set(LIBXML2_WITH_PYTHON OFF CACHE BOOL "Build Python bindings" FORCE)
        set(LIBXML2_WITH_TESTS OFF CACHE BOOL "Build tests" FORCE)
        set(LIBXML2_WITH_PROGRAMS OFF CACHE BOOL "Build programs" FORCE)
        set(LIBXML2_WITH_HTTP OFF CACHE BOOL "Build with HTTP support" FORCE)
        set(LIBXML2_WITH_FTP OFF CACHE BOOL "Build with FTP support" FORCE)
        
        FetchContent_MakeAvailable(libxml2)
        message(STATUS "libxml2 build complete - cached in ${FETCHCONTENT_BASE_DIR}")
    else()
        message(STATUS "libxml2 found in persistent cache - skipping rebuild")
    endif()
endif()

# ─────────────────────────────────────
# Note: Graaf integration disabled for now due to heavy dependencies
# Will use lightweight custom layout implementation instead
# ─────────────────────────────────────

# Enable libxml2 for all platforms
add_definitions(-DUSE_LIBXML2)

# auto-moc for QObject / signals
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

# ─────────────────────────────────────
# 6.  MSVC compiler options
# ─────────────────────────────────────
if(MSVC)
    add_compile_options(/W3 /MP)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS -DUNICODE -D_UNICODE)
endif()

# ─────────────────────────────────────
# 7.  Shared core library to avoid double building
# ─────────────────────────────────────
set(CORE_SOURCES
    # Self-serializing architecture
    node.h
    node.cpp
    socket.h
    socket.cpp
    edge.h
    edge.cpp
    ghost_edge.h
    ghost_edge.cpp
    
    # Node registry system
    node_registry.h
    node_registry.cpp
    
    # XML-first factory
    graph_factory.h
    graph_factory.cpp
    
    # Layout engine using Graaf (disabled for now)
    # layout_engine.h
    # layout_engine.cpp
    
    # UI classes
    window.h
    window.cpp
    view.h
    view.cpp
    scene.h
    scene.cpp
    
    # Professional drag-and-drop palette
    node_palette_widget.h
    node_palette_widget.cpp
    
    # JavaScript engine integration
    javascript_engine.h
    javascript_engine.cpp
    # javascript_console.h
    # javascript_console.cpp
    graph_controller.h
    graph_controller.cpp
    
    # Observer pattern implementation
    graph_observer.h
    graph_observer.cpp
    xml_autosave_observer.h
    xml_autosave_observer.cpp
    
    # Live XML synchronization (not implemented yet)
    # xml_live_sync.h
    # xml_live_sync.cpp
)

# Main application sources (only main.cpp + resources)
set(MAIN_SOURCES
    main.cpp
    icons.qrc
)

# Test application sources (only test files)
set(TEST_SOURCES
    tst_main.h
    tst_main.cpp
)

# ─────────────────────────────────────
# 8.  Shared core library - compile once, use twice
# ─────────────────────────────────────
add_library(NodeGraphCore STATIC ${CORE_SOURCES})

# ─────────────────────────────────────
# 9.  Main executable target
# ─────────────────────────────────────
add_executable(NodeGraph WIN32 ${MAIN_SOURCES})
target_link_libraries(NodeGraph NodeGraphCore)

# ─────────────────────────────────────
# 10. Test executable target
# ─────────────────────────────────────
add_executable(NodeGraphTests ${TEST_SOURCES})
target_link_libraries(NodeGraphTests NodeGraphCore)

# Always use FetchContent libxml2 - Core library (shared by both main and test)
target_link_libraries(NodeGraphCore
    Qt5::Core
    Qt5::Widgets
    Qt5::Gui
    Qt5::Test
    Qt5::Qml
    LibXml2::LibXml2
)

# ─────────────────────────────────────
# 11. VS / Windows extras
# ─────────────────────────────────────
if(WIN32)
    # Main application settings
    set_target_properties(NodeGraph PROPERTIES
        WIN32_EXECUTABLE TRUE
        VS_DPI_AWARE "PerMonitor"
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
        
        # Separate Debug and Release Qt paths
        VS_DEBUGGER_ENVIRONMENT_DEBUG
            "PATH=E:/Qt/5.15.16/Debug_x64/bin;%PATH%"
        VS_DEBUGGER_ENVIRONMENT_RELEASE
            "PATH=E:/Qt/5.15.16/Release_x64/bin;%PATH%"
            
        # No command arguments - removed test_working_graph.xml
        VS_DEBUGGER_WORKING_DIRECTORY
            "${CMAKE_CURRENT_SOURCE_DIR}"
    )
    
    # Test application settings  
    set_target_properties(NodeGraphTests PROPERTIES
        WIN32_EXECUTABLE FALSE
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
        
        # Separate Debug and Release Qt paths for tests
        VS_DEBUGGER_ENVIRONMENT_DEBUG
            "PATH=E:/Qt/5.15.16/Debug_x64/bin;%PATH%"
        VS_DEBUGGER_ENVIRONMENT_RELEASE
            "PATH=E:/Qt/5.15.16/Release_x64/bin;%PATH%"
            
        VS_DEBUGGER_WORKING_DIRECTORY
            "${CMAKE_CURRENT_SOURCE_DIR}"
    )
    
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                 PROPERTY VS_STARTUP_PROJECT NodeGraph)
endif()

# ─────────────────────────────────────
# 12. Install rules (optional on Win)
# ─────────────────────────────────────
if(WIN32)
    install(TARGETS NodeGraph NodeGraphTests RUNTIME DESTINATION .)
    install(FILES
        $<TARGET_FILE:Qt5::Core>
        $<TARGET_FILE:Qt5::Widgets>
        $<TARGET_FILE:Qt5::Gui>
        DESTINATION .
    )
endif()

# ─────────────────────────────────────
# 13. Info
# ─────────────────────────────────────
message(STATUS "Build type       : ${CMAKE_BUILD_TYPE}")
message(STATUS "Qt5 found        : ${Qt5_FOUND}")
message(STATUS "Qt5 version      : ${Qt5_VERSION}")
message(STATUS "Qt5 location     : ${Qt5_DIR}")

# Cache information
if(USE_SYSTEM_LIBXML2)
    message(STATUS "libxml2 source   : System package")
else()
    FetchContent_GetProperties(libxml2)
    if(libxml2_POPULATED)
        message(STATUS "libxml2 source   : FetchContent (cached)")
    else()
        if(WIN32)
            message(STATUS "libxml2 source   : FetchContent (will build for Windows)")
        else()
            message(STATUS "libxml2 source   : FetchContent (will download)")
        endif()
    endif()
endif()
